#!/bin/sh
':' //; exec "`command -v nodejs || command -v node`" "$0"

var MarkdownIt = require('markdown-it');
var hljs = require('highlight.js');
var server = require('http').createServer(httpHandler),
    exec = require('child_process').exec,
    io = require('socket.io').listen(server),
    send = require('send'),
    server,
    socket;

// WARNING: By setting this environment variable, anyone on your network may
// run arbitrary code in your browser and read arbitrary files in the working
// directory of the open file!
if (process.env.INSTANT_MARKDOWN_OPEN_TO_THE_WORLD) {
  // Listen on any interface.
  server.listen(8090, onListening);
} else {
  // Listen locally.
  server.listen(8090, '127.0.0.1', onListening);
}

var md = new MarkdownIt({
  html: true,
  linkify: true,
  highlight: function(str, lang) {
    if (lang && hljs.getLanguage(lang)) {
      try {
        return hljs.highlight(lang, str).value;
      } catch (err) {
        // Do nothing
      }
    } else {
      return str;
    }
  }
});

function writeMarkdown(input, output) {
  var body = '';
  input.on('data', function(data) {
    body += data;
    if (body.length > 1e6) {
      throw new Error('The request body is too long.');
    }
  });
  input.on('end', function() {
    output.emit('newContent', md.render(body));
  });
}

function addSecurityHeaders(res, allowScriptsAtStartup) {
  if (process.env.INSTANT_MARKDOWN_ALLOW_UNSAFE_CONTENT) {
    return;
  }

  var csp =
    // index.html will drop the scripting capabilities upon load.
    "script-src " + (allowScriptsAtStartup ? "'self' 'unsafe-inline'": "") +
    "; sandbox allow-scripts allow-modals allow-forms";
  if (process.env.INSTANT_MARKDOWN_BLOCK_EXTERNAL) {
    csp += '; default-src "self"';
  }
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('Content-Security-Policy', csp);
}

function httpHandler(req, res) {
  switch(req.method)
  {
    case 'GET':
      // Example: /my-repo/raw/master/sub-dir/some.png
      var githubUrl = req.url.match(/\/[^\/]+\/raw\/[^\/]+\/(.+)/);
      if (githubUrl) {
        addSecurityHeaders(res, false);
         // Serve the file out of the current working directory
        send(req, githubUrl[1])
         .root(process.cwd())
         .pipe(res);
        return;
      }

      addSecurityHeaders(res, true);

      // Otherwise serve the file from the directory this module is in
      send(req, req.url)
        .root(__dirname)
        .pipe(res);
      break;

    // case 'HEAD':
      // res.writeHead(200);
      // res.end();
      // exec('open -g http://localhost:8090', function(error, stdout, stderr){
        // http.request({port: 8090})
      // });
      // break;

    case 'DELETE':
      socket.emit('die');
      process.exit();
      break;

    case 'PUT':
      writeMarkdown(req, socket);
      res.writeHead(200);
      res.end();
      break;

    default:
  }
}

io.sockets.on('connection', function(sock){
  socket = sock;
  process.stdout.write('connection established!');
  writeMarkdown(process.stdin, socket);
  process.stdin.resume();
});


function onListening() {
  if (process.platform.toLowerCase().indexOf('darwin') >= 0){
    exec('open -g http://localhost:8090');
  }
  else {  // assume unix/linux
    exec('xdg-open http://localhost:8090');
  }
}
