#!/usr/bin/env node

var MarkdownIt    = require('markdown-it');
var hljs          = require('highlight.js');
var server        = require('http').createServer(httpHandler),
	exec          = require('child_process').exec,
	io            = require('socket.io').listen(server),
	os            = require('os'),
	send          = require('send'),
	pending       = [],
	bufferSockets = {},
	launching_cmd = process.env['DEFAULT_MARKDOWN_BROWSER'];

// WARNING: By setting this environment variable, anyone on your network may
// run arbitrary code in your browser and read arbitrary files in the working
// directory of the open file!
if (process.env.INSTANT_MARKDOWN_OPEN_TO_THE_WORLD) {
	// Listen on any interface.
	server.listen(8090)
} else {
	// Listen locally.
	server.listen(8090, '127.0.0.1');
}

var md = new MarkdownIt({
	html: true,
	linkify: true,
	highlight: function(str, lang) {
		if (lang && hljs.getLanguage(lang)) {
			try {
				return hljs.highlight(lang, str).value;
			} catch (err) {
				// Do nothing
			}
		} else {
			return str;
		}
	}
});

function addSecurityHeaders(req, res, isIndexFile) {
	var csp = [];

	// Cannot use 'self' because Chrome does not treat 'self' as http://host
	// when the sandbox directive is set.
	var HTTP_HOST = req.headers.host || 'localhost:8090';
	var CSP_SELF = 'http://' + HTTP_HOST;

	if (!process.env.INSTANT_MARKDOWN_ALLOW_UNSAFE_CONTENT) {
		if (isIndexFile) {
			// index.html will drop the scripting capabilities upon load.
			csp.push('script-src ' + CSP_SELF + " 'unsafe-inline'");
			csp.push('sandbox allow-scripts allow-modals allow-forms');
		} else {
			csp.push('script-src ');
		}
	}
	if (process.env.INSTANT_MARKDOWN_BLOCK_EXTERNAL) {
		csp.push('default-src data: ' + CSP_SELF);
		csp.push("style-src data: 'unsafe-inline' " + CSP_SELF);
		csp.push('connect-src ' + CSP_SELF + ' ws://' + HTTP_HOST);
	}
	res.setHeader('X-Content-Type-Options', 'nosniff');
	res.setHeader('Content-Security-Policy', csp.join('; '));
	if (isIndexFile) {
		// Never cache the index file, to make sure that changes to the CSP are
		// picked up across soft reloads.
		res.setHeader('Cache-Control', 'no-store');
	}
}


function forwardMarkdown(input) {
	readBody(input, function(body){
		body = JSON.parse(body);
		markdown = md.render(body.body);
		bufferId = body.id;
		success = pushMarkdown(bufferId, 'newContent', markdown);

		function retry(func, number, max, interval){
			success = func();
			if(!success && number < max){
				setTimeout(function(){
					return retry(func, number + 1, max, interval)
				}, interval)
			}
		}
		if(!success){
			// Retries
			retry(function(){
				return pushMarkdown(bufferId, 'newContent', markdown)
			}, 0, 10, 1000)
		}
	});
}

function readBody(req, callback){
	var body = ''
	req.on('data', function(data){
		if (body.length > 1e6) {
			throw new Error('The request body is too long.');
		}
		body += data;
	})
	req.on('end', function(){
		return callback(body);
	})
}

function pushMarkdown(bufferId, eventName, content){
	if(bufferSockets[bufferId] && bufferSockets[bufferId].length){
		bufferSockets[bufferId].map(function(socket){
			socket.emit(eventName, content);
		});
		return true;
	}
	return false;
}

function httpHandler(req, res) {
	switch(req.method)
	{
		case 'GET':
			// Example: /my-repo/raw/master/sub-dir/some.png
			var githubUrl = req.url.match(/\/[^\/]+\/raw\/[^\/]+\/(.+)/);
			if (githubUrl) {
				addSecurityHeaders(req, res, false);
				// Serve the file out of the current working directory
				send(req, githubUrl[1])
					.root(process.cwd())
					.pipe(res);
				return;
			}

			var isIndexFile = /^\/(index\.html)?(\?|$)/.test(req.url);
			addSecurityHeaders(req, res, isIndexFile);

			// Otherwise serve the file from the directory this module is in
			send(req, req.url)
				.root(__dirname)
				.pipe(res);
			break;
		case 'DELETE':
			readBody(req, function(body){
				pushMarkdown(body, 'die', '')
			})
			break;

		case 'POST':
			readBody(req, function(body){
				runBrowser();
				pending.unshift(body); // put it in bending
			})
			break;
		case 'PUT':
			forwardMarkdown(req);
			res.writeHead(200);
			res.end();
			break;

		default:
	}
}

io.set('log level', 1);
io.sockets.on('connection', function(sock){
	var current = pending.pop();
	if(current){
		current = JSON.parse(current)
		var assignmentSocketId = current.id;

		var pendingBody = current.body;
		if(bufferSockets[assignmentSocketId]){
			bufferSockets[assignmentSocketId].push(sock);
		}else{
			bufferSockets[assignmentSocketId] = [sock];
		}
		process.stdout.write('connection established!');
		pushMarkdown(assignmentSocketId, 'newContent', md.render(pendingBody))
		process.stdin.resume();
	}
});

function runBrowser() {
	if (launching_cmd) {
		exec(launching_cmd + ' http://localhost:8090', function(error, stdout, stderr){});
	}else if (os.platform() === 'win32') {
		exec('start /b http://localhost:8090', function(error, stdout, stderr){});
	} else if (os.platform() === 'darwin') {
		exec('open -g http://localhost:8090', function(error, stdout, stderr){});
	} else { // assume unix/linux
		exec('xdg-open http://localhost:8090', function(error, stdout, stderr){});
	}
}


